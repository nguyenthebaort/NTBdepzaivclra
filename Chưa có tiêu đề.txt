
hookfunction(error,function()
    return
end)


local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait()
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.



repeat wait()
    print("waiting until game is loaded")
until game:IsLoaded()
-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide

local ohString1 = "SetTeam"
local ohString2 = "Pirates"

game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(ohString1, ohString2)

game:GetService("RunService").Heartbeat:connect(function()
	for i,v in pairs(game.Workspace:GetChildren()) do
		if string.find(v.Name,"Fruit") then
			if v:FindFirstChild("Handle") then
				game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = v.Handle.CFrame
			end
		end
	end
end)


game:GetService("RunService").Heartbeat:connect(function()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if string.find(v.Name,"Fruit") then
            local igfruitname = string.split(v.Name," ")

            local ohString1 = "StoreFruit"
            local ohString2 = tostring(igfruitname[1].."-"..igfruitname[1])
            local ohInstance3 = v --[[ PARENTED TO NIL OR DESTROYED ]]

            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(ohString1, ohString2, ohInstance3)
        end
    end
end)


game:GetService("RunService").Heartbeat:connect(function()
    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("Tool") then
            v.Parent = game.Players.LocalPlayer.Backpack
        end
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Fixed 
    local lockedchest;
    for i,v in pairs(game.Workspace:GetChildren()) do
        if string.find(v.Name,"Chest") then
            print(v.Name)
            local tweenService = game:GetService("TweenService")
            local tweenInfo = TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0)
            local part = game.Players.LocalPlayer.Character.HumanoidRootPart
            local goal = {CFrame = v.CFrame+Vector3.new(0,0,0)}
            local tween = tweenService:Create(part, tweenInfo, goal)
            tween:Play()
            --game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = v.CFrame+Vector3.new(0,-.5,0)
            wait(.2)
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = lastpos
            wait(.5)
        end
    end
end)


wait(20)

Teleport()


